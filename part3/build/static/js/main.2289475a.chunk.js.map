{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/PersonList.js","services/APIService.js","components/Notification.js","App.js","services/UtilFunctions.js","index.js"],"names":["Filter","value","inputHandler","onChange","event","target","PersonForm","name","nameChangeHandler","number","numberChangeHandler","submitHandler","onSubmit","type","PersonList","persons","onDelete","map","person","key","id","onClick","APIService","axios","get","response","data","post","put","delete","Notification","config","message","className","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","filterValue","setFilterValue","notificationObject","setNotificationObject","notify","setTimeout","_","useEffect","getPersons","then","preventDefault","some","window","confirm","existingPerson","find","p","updatedPerson","putPerson","filter","concat","catch","error","newPerson","crypto","getRandomValues","Uint8Array","postPerson","base","test","toLowerCase","includes","deletePerson","ReactDOM","render","document","getElementById"],"mappings":"0NACaA,EAAS,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,aAC5B,OACI,yDACsB,2BAAOD,MAAOA,EAAOE,SAAU,SAACC,GAAD,OAAWF,EAAaE,EAAMC,OAAOJ,YCFrFK,EAAa,SAAC,GAA6E,IAA3EC,EAA0E,EAA1EA,KAAMC,EAAoE,EAApEA,kBAAmBC,EAAiD,EAAjDA,OAAQC,EAAyC,EAAzCA,oBAAqBC,EAAoB,EAApBA,cAE/E,OACI,0BAAMC,SAAUD,GACZ,sCACU,2BAAOV,MAAOM,EAAMJ,SAAUK,KAExC,wCACY,2BAAOP,MAAOQ,EAAQN,SAAUO,KAE5C,6BACI,4BAAQG,KAAK,UAAb,UCXHC,EAAa,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,SAClC,OACI,4BAEQD,EAAQE,KAAI,SAAAC,GAAM,OACd,wBAAIC,IAAKD,EAAOE,IACXF,EAAOX,KADZ,IACmBW,EAAOT,OACtB,4BAAQY,QAAS,WAAQL,EAASE,KAAlC,gB,uDCiBlBI,EAAa,I,qOAtBYC,IAClBC,IADkB,gB,cAAjBC,E,yBAECA,EAASC,M,2KAGHR,G,uFACUK,IAClBI,KADkB,eACGT,G,cADpBO,E,yBAECA,EAASC,M,2KAGJR,G,uFACWK,IAClBK,IADkB,uBACEV,EAAOE,IAAMF,G,cADhCO,E,yBAECA,EAASC,M,8KAGDR,G,0FACRK,IAAMM,OAAN,uBAA6BX,EAAOE,M,0GCpB5C,IAAMU,EAAe,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACnBlB,EAAkBkB,EAAlBlB,KAAMmB,EAAYD,EAAZC,QACd,OAAKA,EAED,uBAAGC,UAAS,uBAAkBpB,IAASmB,GAFtB,MCoGVE,G,MA/FH,WAAO,IAAD,EACgBC,mBAAS,IADzB,mBACPpB,EADO,KACEqB,EADF,OAEgBD,mBAAS,IAFzB,mBAEPE,EAFO,KAEEC,EAFF,OAGoBH,mBAAS,IAH7B,mBAGPI,EAHO,KAGIC,EAHJ,OAIwBL,mBAAS,IAJjC,mBAIPM,EAJO,KAIMC,EAJN,OAKsCP,mBAAS,CAAEtB,KAAM,UAAWmB,QAAS,KAL3E,mBAKPW,EALO,KAKaC,EALb,KAad,SAASC,EAAOhC,EAAMmB,GAClBY,EAAsB,CAAE/B,OAAMmB,YAC9Bc,YAAW,SAAAC,GAAC,OAAIH,EAAsB,CAAE/B,KAAM,UAAWmB,QAAS,OAAO,KA0D7E,OAlEAgB,qBAAU,WACN1B,EACK2B,aACAC,MAAK,SAAAnC,GAAO,OAAIqB,EAAWrB,QACjC,IA+DC,6BACI,yCACA,kBAAC,EAAD,CAAcgB,OAAQY,IACtB,kBAAC,EAAD,CAAQ1C,MAAOwC,EAAavC,aAAcwC,IAC1C,4CACA,kBAAC,EAAD,CACInC,KAAM8B,EACN5B,OAAQ8B,EACR/B,kBArBZ,SAA0BJ,GACtBkC,EAAWlC,EAAMC,OAAOJ,QAqBhBS,oBAlBZ,SAA4BN,GACxBoC,EAAapC,EAAMC,OAAOJ,QAkBlBU,cA/DZ,SAA0BP,GAEtB,GADAA,EAAM+C,iBAJ+B5C,EAKD8B,EAJ7BtB,EAAQqC,MAAK,SAAAlC,GAAM,OAAIA,EAAOX,OAASA,MAK1C,GAAI8C,OAAOC,QAAP,UAAkBjB,EAAlB,yFAAkH,CAClH,IAAMkB,EAAiBxC,EAAQyC,MAAK,SAAAC,GAAC,OAAIA,EAAElD,OAAS8B,KAC9CqB,EAAa,2BAAQH,GAAR,IAAwB9C,OAAQ8B,IACnDjB,EACKqC,UAAUD,GACVR,MAAK,SAAAQ,GAAa,OAAItB,EAAWrB,EAC7B6C,QAAO,SAAAH,GAAC,OAAIA,EAAErC,KAAOmC,EAAenC,MACpCyC,OAAOH,OAEXR,MAAK,SAAAH,GAAC,OAAIF,EAAO,UAAD,kBAAuBa,EAAcnD,KAArC,kBAChBuD,OAAM,SAAAC,GAAK,OAAIlB,EAAO,QAASkB,WAX5C,CALJ,IAAyCxD,EAoB/ByD,EAAY,CAAEzD,KAAM8B,EAAS5B,OAAQ8B,EAAWnB,GC9CnDiC,OAAOY,OAAOC,gBAAgB,IAAIC,WAAW,IAAI,ID+CpD7C,EACK8C,WAAWJ,GACXd,MAAK,SAAAhC,GAAM,OAAIkB,EAAWrB,EAAQ8C,OAAO3C,OACzCgC,MAAK,SAAAH,GAAC,OAAIF,EAAO,UAAD,gBAAqBmB,EAAUzD,KAA/B,kBAChBuD,OAAM,SAAAC,GAAK,OAAIlB,EAAO,QAASkB,MACpCzB,EAAW,IACXE,EAAa,QAyCT,uCACA,kBAAC,EAAD,CACIzB,QAASA,EAAQ6C,QAAO,SAAA1C,GAAM,OAnBfmD,EAmBqCnD,EAAOX,KAnBtC+D,EAmB4C7B,EAlBlE4B,EAAKE,cAAcC,SAASF,GADvC,IAA2BD,EAAMC,KAoBrBtD,SAzCZ,SAA4BE,GACpBmC,OAAOC,QAAP,0CAAkDpC,EAAOX,KAAzD,gBACAe,EACKmD,aAAavD,GACbgC,MAAK,SAAAH,GAAC,OAAIX,EAAWrB,EAAQ6C,QAAO,SAAAH,GAAC,OAAIA,EAAErC,KAAOF,EAAOE,UACzD8B,MAAK,SAAAH,GAAC,OAAIF,EAAO,UAAD,kBAAuB3B,EAAOX,KAA9B,kBAChBuD,OAAM,SAAAf,GACHX,EAAWrB,EAAQ6C,QAAO,SAAAH,GAAC,OAAIA,EAAErC,KAAOF,EAAOE,OAC/CyB,EAAO,QAAD,UAAa3B,EAAOX,KAApB,iDE7D1BmE,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.2289475a.chunk.js","sourcesContent":["import React from 'react';\nexport const Filter = ({ value, inputHandler }) => {\n    return (\n        <>\n            Filter phonebook: <input value={value} onChange={(event) => inputHandler(event.target.value)} />\n        </>\n    )\n}","import React from 'react';\n\nexport const PersonForm = ({ name, nameChangeHandler, number, numberChangeHandler, submitHandler }) => {\n\n    return (\n        <form onSubmit={submitHandler}>\n            <div>\n                name: <input value={name} onChange={nameChangeHandler} />\n            </div>\n            <div>\n                number: <input value={number} onChange={numberChangeHandler} />\n            </div>\n            <div>\n                <button type=\"submit\">add</button>\n            </div>\n        </form>\n    )\n}","import React from 'react'\n\nexport const PersonList = ({ persons, onDelete }) => {\n    return (\n        <ul>\n            {\n                persons.map(person =>\n                    <li key={person.id}>\n                        {person.name} {person.number}\n                        <button onClick={() => { onDelete(person) }}>Delete</button>\n                    </li>)\n            }\n        </ul>\n    )\n}","import axios from 'axios';\n\nexport default class APIServiceBean {\n    async getPersons() {\n        const response = await axios\n            .get(`/api/persons`)\n        return response.data;\n    }\n\n    async postPerson(person) {\n        const response = await axios\n            .post(`/api/persons`, person);\n        return response.data;\n    }\n\n    async putPerson(person) {\n        const response = await axios\n            .put(`/api/persons/${person.id}`, person)\n        return response.data;\n    }\n\n    async deletePerson(person) {\n        return axios.delete(`/api/persons/${person.id}`)\n    }\n}\n\nconst APIService = new APIServiceBean()\n\nexport { APIService };","import React from 'react';\n\nexport const Notification = ({ config }) => {\n    const { type, message } = config;\n    if (!message) return null;\n    return (\n        <p className={`notification ${type}`}>{message}</p>\n    )\n}","import React, { useState, useEffect } from 'react'\nimport { Filter } from './components/Filter';\nimport { PersonForm } from './components/PersonForm';\nimport { PersonList } from './components/PersonList';\nimport { APIService } from './services/APIService';\nimport { generateUniqueId } from './services/UtilFunctions';\nimport { Notification } from './components/Notification';\nimport './App.css';\n\nconst App = () => {\n    const [persons, setPersons] = useState([]);\n    const [newName, setNewName] = useState('')\n    const [newNumber, setNewNumber] = useState('')\n    const [filterValue, setFilterValue] = useState('');\n    const [notificationObject, setNotificationObject] = useState({ type: 'success', message: '' });\n\n    useEffect(() => {\n        APIService\n            .getPersons()\n            .then(persons => setPersons(persons));\n    }, [])\n\n    function notify(type, message) {\n        setNotificationObject({ type, message });\n        setTimeout(_ => setNotificationObject({ type: 'success', message: '' }), 3000);\n    }\n\n    function isNameAlreadyPresentInPhonebook(name) {\n        return persons.some(person => person.name === name);\n    }\n    function handleFormSubmit(event) {\n        event.preventDefault();\n        if (isNameAlreadyPresentInPhonebook(newName)) {\n            if (window.confirm(`${newName} is already added to phonebook. Should the old number be replaced with  the new one?`)) {\n                const existingPerson = persons.find(p => p.name === newName);\n                const updatedPerson = { ...existingPerson, number: newNumber };\n                APIService\n                    .putPerson(updatedPerson)\n                    .then(updatedPerson => setPersons(persons\n                        .filter(p => p.id !== existingPerson.id)\n                        .concat(updatedPerson))\n                    )\n                    .then(_ => notify('success', `Updated ${updatedPerson.name}'s contact`))\n                    .catch(error => notify('error', error));\n            }\n            return;\n        }\n        const newPerson = { name: newName, number: newNumber, id: generateUniqueId() };\n        APIService\n            .postPerson(newPerson)\n            .then(person => setPersons(persons.concat(person)))\n            .then(_ => notify('success', `Added ${newPerson.name}'s contact`))\n            .catch(error => notify('error', error))\n        setNewName('');\n        setNewNumber('');\n    }\n\n    function handleDeletePerson(person) {\n        if (window.confirm(`Are you sure you want to delete ${person.name}'s contact`)) {\n            APIService\n                .deletePerson(person)\n                .then(_ => setPersons(persons.filter(p => p.id !== person.id)))\n                .then(_ => notify('success', `Deleted ${person.name}'s contact`))\n                .catch(_ => {\n                    setPersons(persons.filter(p => p.id !== person.id));\n                    notify('error', `${person.name}'s contact has already been deleted`);\n                })\n        }\n    }\n\n    function handleNameChange(event) {\n        setNewName(event.target.value);\n    }\n\n    function handleNumberChange(event) {\n        setNewNumber(event.target.value);\n    }\n\n    function doesStringInclude(base, test) {\n        return base.toLowerCase().includes(test)\n    }\n\n    return (\n        <div>\n            <h2>Phonebook</h2>\n            <Notification config={notificationObject} />\n            <Filter value={filterValue} inputHandler={setFilterValue} />\n            <h2>Add a number</h2>\n            <PersonForm\n                name={newName}\n                number={newNumber}\n                nameChangeHandler={handleNameChange}\n                numberChangeHandler={handleNumberChange}\n                submitHandler={handleFormSubmit}\n            />\n            <h2>Numbers</h2>\n            <PersonList\n                persons={persons.filter(person => doesStringInclude(person.name, filterValue))}\n                onDelete={handleDeletePerson}\n            />\n        </div>\n    )\n}\n\nexport default App;\n","function generateUniqueId() {\n    return window.crypto.getRandomValues(new Uint8Array(1))[0];\n}\n\nexport { generateUniqueId }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}